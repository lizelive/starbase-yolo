// this manages one generator and an array of batts
// 1 = max, 0 = auto, -1 = off

// if you want to know how much power you are using
include "std/math"

define NumBats = 36
define NumSockets = 4

include "../config"

now=Time
dTime=now-last

storedPower=0
unitStoredPower=0
define storedPower=NumBats*:StoredBatteryPower
define maxStoredPower=NumBats*:MaxBatteryPower
unitStoredPower=storedPower/maxStoredPower
totalNetPower=storedPower-lastStoredPower
batteryRate=totalNetPower/dTime

fuelRate=fuelNet/dTime

powerGenerated=0; powerGenerated=NumSockets*(MaxSocketPower/100)*:SocketUnitRate $
generatorMode=0; generatorMode=:GeneratorMode $

// what percentage fuel i have	
unitFuelStored=:FuelChamberFuel/:FuelChamberMaxFuel
define totalNetPower = batteryNet
fuelLeftS = unitFuelStored / fuelRate

msg=""

msg+="Gen: "
if generatorMode then
	msg+="M"
	genUnitPower=(generatorMode+1)/2
else
	msg+="A"
	genUnitPower=1-unitStoredPower
	
end
msg+=genUnitPower+" "+powerGenerated+"e/s r:"+fuelLeftS+"s"
FuelChamberUnitRateLimit=100*genUnitPower $


if fuelLeftS < 100 then
:FcuGeneralMultiplier = 0
end

percentageStoredPower=1000*unitStoredPower/10
msg+="\nBat: "+percentageStoredPower+"% "
if math_abs(batteryRate)>0.1 then
	if batteryRate<0 then
		msg+="e"
		timeToExtreme=storedPower/batteryRate
	else
		msg+="f"
		timeToExtreme=(maxStoredPower-storedPower)/batteryRate
	end
	timeToExtreme=math_floor(timeToExtreme)
	msg+=" in "+timeToExtreme+"s"
end

:PowerInfo=msg $

// handle transponder
inSafeZone=:insideSafezone
transponderActive=:insideSafezone+:TransponderMode>1 $


// update old
lastStoredPower=storedPower
lastUnitFuelStored=unitFuelStored
last=now

