define RangeFinderDistance=:RFD

define TurretRotation=:tr1
define TurretPitch=:tp1

// the spiral varibles. relative to range finder.
define TargetX=tx
define TargetY=ty
define TargetZ=tz
define MineTime=MT

define Scale=:Scale
define Speed=:Speed
define DoMine=:Fire

//the offset of this turret
define PosX=px
define PosY=py
define PosZ=0

include "std/logic"
include "std/math"


define rad_to_deg=180/math_pi
define math_half_rot=180
define math_full_rot=360
define math_tau=2*math_pi
define math_quater_rot=90
define deg_to_rad=math_pi/180

//angle betwen -180 and 180
macro angle_mod(x) expr
	math_mod(math_mod(x,math_full_rot)+(math_full_rot+math_half_rot),math_full_rot)-math_half_rot
end

// acurate to within 2.123 degrees
macro math_acos(out, x) block
	a=sqrt(2+2*x)
	b=sqrt(2-2*x)
	c=sqrt(2-a)
	out=rad_to_deg*8/3*c-rad_to_deg/3*b
end

// acurate to within 2.123 degrees
macro math_asin(out, x) block
	a=sqrt(2+2*x)
	b=sqrt(2-2*x)
	c=sqrt(2-a)
	out=90-rad_to_deg*8/3*c+rad_to_deg/3*b
end

// economized rational approximation
// acurate to within 0.109 degrees
macro math_atan(out, x) block
	//out = 0.9724*xâˆ’0.1919*x^3
	y=x
	sign = math_sign(y)
	flip=1-2*(abs(y)>1)
	didFlip = flip<0
	out=90*didFlip*sign+flip*215.814*(y^flip)/(3.8+y^(2*flip))
end


macro math_tan(out, x) block
	o=math_mod(math_mod(x,math_half_rot)+math_half_rot+math_quater_rot,math_half_rot)-math_quater_rot
	out=-140.706*o/(-8228.419+o^2)
end

// Bhaskara I method, acurate within 0.002
macro math_sin(out, x) block
	o=angle_mod(x)
	s=math_sign(o)
	o=abs(o)
	t=180-o
	out=s*4*o*t/(40500-o*t)
end

// acurate within 0.002
macro math_cos(out, x) block
	math_sin(out,x+math_quater_rot)	
end


// really need to optimize this.
macro math_atan2(out, y, x) block
	sgny=math_sign(y)
	atanyx=0
	t=0 // need this becuse compiler shinanigans
	t=y/x
	math_atan(atanyx,t)
	$ out=atanyx+(1-math_sign(x))/2*(1+sgny-sgny^2)*180
end

MineTime=0
logic_wait(not DoMine)
while DoMine do
    MineTime++
    t=MineTime*Speed
    math_sin(x,t)
    math_cos(y,t)
    s = Scale / 360
    x*=s*t
    y*=s*t
    z=RangeFinderDistance   
    TargetX=z; TargetY=y; TargetZ=x
    x=TargetX-PosX; y=TargetY-PosY; z=TargetZ-PosZ
    //do the pitch
    slopeDepth=z/sqrt(x^2+y^2+z^2)
    math_asin(pitch, slopeDepth)
    // rotate the turret idealy this would be arctan(y,x) or something but can't do that becuse fml
    math_atan2(rotation, -x , y)
    // these should happen on same frame
    TurretRotation=rotation; TurretPitch=pitch
end
